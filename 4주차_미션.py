# -*- coding: utf-8 -*-
"""4주차 미션

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nUv7h1zfauH-x-HUXWnX_yiB3iePWwOv

📌Q1. 우리는 1,000이상의 큰 수를 쓸 때, 숫자의 크기를 쉽게 확인할 수 있도록 매 3자리마다 "," 를 찍어 숫자를 표기하고 있습니다. 파이썬에도 아래와 같이 쉽게 나타낼 수 있는 편리한 방법이 존재하지요. 하지만! 이번 미션에서는 아래의 기능을 사용하지 않고, 직접 숫자 표기법을 만들어 보도록 합시다. 사용자로부터 1,000이상의 숫자를 입력 받고, 매 3자리마다 ","를 찍어 숫자의 크기를 쉽게 구별할 수 있는 코드를 작성해주세요. [ 난이도 : ⭐️⭐️/5]
"""

def make_comma(num):
    num_str = str(num)
    num_length = len(num_str)

    if num_length <= 3:
        return num_str

    comma_count = (num_length - 1) // 3
    result = ""

    for i in range(num_length - 1, -1, -1):
        result += num_str[i]
        if (num_length - i) % 3 == 0 and comma_count > 0:
            result += ","
            comma_count -= 1

    return result[::-1]


num = int(input("숫자를 입력하세요: "))
converted_num = make_comma(num)
print(converted_num)

"""1. 입력된 숫자를 문자열로 변환
2. 숫자의 길이 확인
3. if문 사용해서 숫자의 길이가 3 이하면 그대로 반환
4. comma count 변수를 사용해 삽입할 콤마의 개수 계산
5. 반복문을 사용해 끝에서 부터 한칸씩 확인해서 세칸마다 콤마 입력
6. return result[::-1]을 사용해 결과를 뒤집어서 변환 후 출력

📌Q2. 햇빛이 따사로운 어느 날, 문득 읽고 있던 연애소설에서 '사랑'이라는 단어가 몇 개나 등장하는지 궁금해졌습니다. 손으로 하나씩 세기에는 페이지 수가 너무 많아 번거롭게 느껴지는데요, 파이썬이라면 이 문제를 한번에 해결할 수 있다는 생각이 들어 시도해보려고 합니다. 이번주에 배운 내용을 토대로 파이썬을 통해 입력한 문장에서 특정 단어의 갯수를 세어주는 코드를 작성해봅시다.  [난이도 : ⭐️⭐️/5]
"""

def count_word(sentence, word):
    word_count = 0
    index = 0

    while True:
        index = sentence.find(word, index)  # 문장에서 단어의 위치를 찾음
        if index == -1:
            break  # 더 이상 단어가 없으면 반복 종료
        word_count += 1
        index += 1

    return word_count

user_input = input("문장을 입력하세요: ")
search_word = "습니다"
result = count_word(user_input, search_word)
print(f"'{search_word}'를 찾은 개수:", result)

"""index = sentence.find(word, index) 를 사용해서 문장에서 단어의 위치를 찾음
if문을 사용하고 break를 사용해 더이상 단어가 없으면 반복 종료

📌Q3. 특정 행사에서 방명록을 작성하는 웹 사이트를 개발하려고 합니다. 방명록에는 참석자들의 휴대전화번호가 포함되어야 합니다. 하지만 몇 명의 참석자들이 휴대전화번호를 잘못된 형식으로 작성하여 저장되었습니다. 파이썬을 활용하여 방명록 명단을 확인하고, 올바르지 않은 휴대전화번호를 찾아내는 코드를 작성해주세요. [난이도 : ⭐️⭐️/5]
"""

def wrong_guest_book(guest_book):
    guest_list = guest_book.split('\n')

def wrong_guest_book(guest_book):
    commas = guest_book.strip().split('\n')
    for comma in commas:
        name, phone_number = comma.split(',')
        if not (phone_number.startswith('010') and '-' in phone_number and len(phone_number) == 13):
            print("잘못 쓴 사람:",name)
            print("잘못 쓴 번호:",phone_number,"\n")

guest_book = """김갑,123456789
이을,010-1234-5678
박병,010-5678-111
최정,111-1111-1111
정무,010-3333-3333"""

wrong_guest_book(guest_book)

"""1. split('\n') 를 사용해 한줄씩 나눈다
2. guest_list로 반복문을 실행
3. guest_info를 콤마로 불리해서 name과 phone number를 분리
4. 전화번호가 010으로 시작하는지, 전화번호 총 길이가 13자리 인지, 5번째와 8번째
문자가 하이폰(-)인지 확인하고 하나라도 만족하지 않으면 잘못 쓴 사람, 잘못 쓴 번호로 출력

📌Q4. 한 IT 기업에서는 신규 직원의 신상정보를 확인하는 시스템을 도입하려고 합니다. 이 시스템은 주민등록번호를 받아 해당 직원이 몇년 몇월에 태어났는지 그리고 남자인지 여자인지를 출력하는 기능을 제공합니다. 파이썬을 활용해 다음의 조건을 충족하는 프로그램을 만들고, 효율적인 인사 관리 시스템을 만들어보세요.  [난이도 : ⭐️⭐️⭐️⭐️/5]
"""

def check_id(id_number):
    if len(id_number) != 14 or not id_number[6] == '-':
        print("잘못된 번호입니다.")
        return

    birth_year = int(id_number[:2])
    birth_month = int(id_number[2:4])
    birth_day = int(id_number[4:6])
    gender_num = int(id_number[7])

    if not (0 <= birth_month <= 12) or not (0 <= birth_day <= 31):
        print("잘못된 번호입니다.")
        return

    if 1 <= gender_num <= 4:
        gender = "남자" if gender_num % 2 == 1 else "여자"
    else:
        print("잘못된 번호입니다.")
        return

    if 0 <= birth_year <= 23:
        answer = input("2000년 이후 출생자입니까? (O/X): ")
        if answer.lower() == 'o':
            birth_year += 2000
        elif answer.lower() == 'x':
            birth_year += 1900
        else:
            print("잘못된 입력입니다.")
            return
    else:
        birth_year += 1900

    print(f"{birth_year:04d}년{birth_month:02d}월 {gender}")

a = input("주민등록번호를 입력하세요: ")
check_id(a)

"""1. 주민등록번호의 길이가 14가 아니거나 7번쨰 위치하는 문자가 - 가 아니라면 잘못된 번호입니다를 출력
2. 주민등록번호를 추출
3. 그리고 생년월일과 성별을 확인
4. 성별 숫자가 홀수면 남성 짝수면 여성 으로 gender 변수에 저장
5. 출생년도가 00부터 23까지인 경우 2000년 이후 출생 입니까를 통해 출생년도 확인 후 출력
"""