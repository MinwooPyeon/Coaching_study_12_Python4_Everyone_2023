# -*- coding: utf-8 -*-
"""6주차 미션

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h0ISD8zoLS4Op9dn7rjZYt0mt8VcEVg3

📌Q1. 우리나라 역사에는 다양한 왕들이 있었습니다. 특히, 고려시대와 조선시대를 보면 몇몇의 왕 이름이 같은 것을 알 수 있는데요, 이번 문제에서는 고려시대와 조선시대의 왕 이름 중에서 두 시대에 모두 사용된 이름이 몇 개인지 알아보려 합니다. 다음의 조건을 만족하는 파이썬 프로그램을 만들어 중복된 이름은 몇 개인지 알아봅시다! [난이도 : ⭐️⭐️⭐️/5]
"""

def king(korea_king, chosun_king):
    korea_king_list = korea_king.split(',')
    chosun_king_list = chosun_king.split(',')

    common_kings = set(korea_king_list) & set(chosun_king_list)
    common_kings = sorted(common_kings, key=lambda x: (korea_king_list.index(x), chosun_king_list.index(x)))

    for name in common_kings:
        print(f"조선과 고려에 모두 있는 왕 이름:{name}")

    print(f"조선과 고려에 모두 있는 왕 이름은 총 {len(common_kings)}개 입니다.")

korea_king = "태조,혜종,정종,광종,경종,성종,목종,현종,덕종,정종,문종,순종,선종,헌종,숙종,예종,인종,의종,명종,신종,희종,강종,고종,원조,충렬왕,충선왕,충숙왕,충혜왕,충목왕,충정왕,공민왕,우왕,창왕,공양왕"
chosun_king = "태조,정종,태종,세종,문종,단종,세조,예종,성종,연산군,중종,인종,명종,선조,광해군,인조,효종,현종,숙종,경종,영조,정조,순조,헌종,철종,고종,순종"

king(korea_king, chosun_king)

"""📌Q2. 여러분은 영업팀의 영업관리자로서, 6명의 팀 멤버를 지휘하고 있습니다. 얼마 전, 상반기가 종료되어 멤버들의 실적을 평가할 시기가 다가왔습니다. 실적을 기준으로 잘한 멤버에게는 보너스를 주고, 성과가 부족한 멤버에게는 면담을 진행하여 개선을 도모하려고 합니다. 이를 조금 더 편리하게 하기 위해 파이썬을 이용해 함수를 만들어 볼 예정입니다. 다음 요구사항을 만족하는 프로그램을 만들고, 보너스 대상자와 면담 대상자를 구분해보세요. [난이도 : ⭐️⭐️⭐️/5]"""

def sales_management(member_names, member_records):
    results = []

    for name, records in zip(member_names, member_records):
        average_score = sum(records) / len(records)
        results.append((name, average_score))

    sorted_results = sorted(results, key=lambda x: x[1], reverse=True)

    bonus_candidates = [name for rank, (name, score) in enumerate(sorted_results[:2], start=1) if score > 5]
    counseling_candidates = [name for rank, (name, score) in enumerate(sorted_results[-2:], start=1) if score <= 3]

    print("보너스 대상자:", ", ".join(bonus_candidates))
    print("면담 대상자:", ", ".join(counseling_candidates))

# 입력 데이터
member_names = ["갑돌이", "갑순이", "을돌이", "을순이", "병돌이", "병순이"]
member_records = [[4,5,3,5,6,5,3,4,1,3,4,5],[2,3,4,3,1,2,0,3,2,5,7,2],
           [1,3,0,3,3,4,5,6,7,2,2,1],[3,2,9,2,3,5,6,6,4,6,9,9],
           [8,7,7,5,6,7,5,8,8,6,10,9],[7,8,4,9,5,10,3,3,2,2,1,3]]
# 결과 출력
sales_management(member_names, member_records)

"""📌Q3. 최근 철수는 예금 금리가 낮은 현재 상황을 보고, 주식 시장에 흥미를 느끼게 되었습니다. 그래서 아래와 같이 매수한 종목들의 정보를 활용해 수익률을 계산하고 싶어졌습니다. 철수는 매수한 종목의 이름, 수량, 매수 평균 금액을 알고 있으며, 각 종목의 판매가도 확인했습니다. 이제 우리는 철수를 도와서 종목별 수익률을 계산하는 프로그램을 만들어보려고 합니다. 파이썬을 이용해 종목별 수익률을 계산하고, 수익률이 높은 순서대로 출력해보세요. (소수 둘째자리까지 출력) [난이도 : ⭐️⭐️⭐️/5]"""

def stock_profit(stocks_data, sells_data):
    stocks = dict()

    for stock_info in stocks_data.split(','):
        stock, quantity, buy_price = stock_info.split('/')
        stocks[stock] = (int(buy_price), int(quantity))

    results = []

    for stock, (buy_price, quantity) in stocks.items():
        sell_price = sells_data.pop(0)
        profit_percentage = ((sell_price - buy_price) / buy_price) * 100
        results.append((stock, profit_percentage))

    for stock, profit_percentage in sorted(results, key=lambda x: x[1], reverse=True):
        print(f"{stock}의 수익률 {profit_percentage:.2f}")

stocks_data = "삼성전자/10/85000,카카오/15/130000,LG화학/3/820000,NAVER/5/420000"
sells_data = [82000, 160000, 835000, 410000]

stock_profit(stocks_data, sells_data)

"""📌 Q4. 여러분은 온라인 쇼핑몰을 운영하는 사장님입니다. 상품을 많이 구매해주신 VIP 회원 분들께 감사의 마음을 전하기 위해 이달의 할인 쿠폰을 제공하려고 하는데요, 업무 효율을 높이기 위해 파이썬 프로그래밍을 이용해 회원을 구분하고자 합니다. 아래와 같은 회원 정보가 있을 때, 할인 쿠폰을 받을 VIP 회원이 누군인지 출력하는 함수를 만들어보세요. [난이도 : ⭐️⭐️⭐️/5]"""

def good_customer(info):
    info_list = info.split(',')
    members = {'아이디': [],'나이': [],'전화번호': [],'성별': [],'지역': [],'구매횟수': []}

    for i in range(0, len(info_list), 6):
        id, age, phone, gender, location, purchase_count = info_list[i], info_list[i+1], info_list[i+2], info_list[i+3], info_list[i+4], int(info_list[i+5])
        members['아이디'].append(id)
        members['나이'].append(age)
        members['전화번호'].append(phone if phone != 'x' else '000-0000-0000')
        members['성별'].append(gender)
        members['지역'].append(location)
        members['구매횟수'].append(purchase_count)

    vip_members = []

    for i in range(len(members['아이디'])):
        if members['구매횟수'][i] >= 8 and members['전화번호'][i] != '000-0000-0000':
            vip_members.append({'아이디': members['아이디'][i],'나이': members['나이'][i],'전화번호': members['전화번호'][i],'성별': members['성별'][i],'지역': members['지역'][i],'구매횟수': members['구매횟수'][i]})

    return vip_members

info = "abc,21세,010-1234-5678,남자,서울,5,cdb,25세,x,남자,서울,4,bbc,30세,010-2222-3333,여자,서울,3,ccb,29세,x,여자,경기,9,dab,26세,x,남자,인천,8,aab,23세,010-3333-1111,여자,경기,10"
vip_members = good_customer(info)

for member in vip_members:
    print(f"할인 쿠폰을 받을 회원정보 아이디:{member['아이디']}, 나이:{member['나이']}, 전화번호:{member['전화번호']}, 성별:{member['성별']}, 지역:{member['지역']}, 구매횟수: {member['구매횟수']}")