# -*- coding: utf-8 -*-
"""3주차 미션

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GgBCsJ8UfnoLeIemPc8WKNha5pcEJ9m0

📌Q1. 숫자를 입력 받고 그 숫자의 구구단을 출력하는 함수를 만들어 봅시다.
            다만 아래의 조건을 만족해 주세요. [난이도 : ⭐️⭐️/5]
"""

def gugudan(number):
    try:
        number = int(number)
        print("몇단 ?:",number)
        print(number,"단")

        for x in range (1,10):
            if x%2!=0:
                if number*x <= 50:
                    print(number+"x"+x+"="+number*x)
                    x += 1
                else:
                    x += 1
            else:
                x += 1
    except:
        print("정수를 입력하시오")
number = input("정수를 입력하시오: ")
gugudan(number)

def gugudan(number):
    print(f"몇 단? : {number}")
    print(f"{number}단")
    count = 0
    for i in range(1, 51, 2):
        result = number * i
        if result < 50:
            count += 1
            print(f"{number} × {count} = {result}")

number = int(input("몇 단? : "))
gugudan(number)

"""📌Q2. 1주차에서 만들었던 가위바위보 게임의 업그레이드 버전을 함수로 만들어 봅시다.
           아래와 같은 조건을 만족해 주세요. [난이도 : ⭐️⭐️⭐️/5]


"""

import random

def get_user_choice(user_input):
    if user_input in ['가위', '바위', '보']:
        return user_input
    elif user_input in ['0', '1', '2']:
        user_input = int(user_input)
        return ['가위', '바위', '보'][user_input]
    else:
        return '잘못된 입력입니다.'

def computer_choice(computer):
    if computer == 0:
        return '가위'
    elif computer == 1:
        return '바위'
    elif computer == 2:
        return '보'

def play_time(games):
    player_win = 0
    player_lose = 0
    computer_win = 0
    computer_lose = 0
    draw = 0

    for i in range(1, games + 1):
        user_input = input("가위, 바위, 보 중 하나를 입력: ")
        user_choice = get_user_choice(user_input)
        computer = random.randint(0, 2)
        computer_choice_str = computer_choice(computer)

        print(f"가위 바위 보: {user_choice}")
        print(f"나: {user_choice}")
        print(f"컴퓨터: {computer_choice_str}")

        if user_choice == computer_choice_str:
            print(f"{i}번째 판 비겼습니다")
            draw += 1
        elif user_choice == "가위":
            if computer_choice_str == '바위':
                print(f"{i}번째 판 컴퓨터의 승리!")
                player_lose += 1
                computer_win += 1
            elif computer_choice_str == "보":
                print(f"{i}번째 판 나의 승리!")
                player_win += 1
                computer_lose += 1
        elif user_choice == "바위":
            if computer_choice_str == '보':
                print(f"{i}번째 판 컴퓨터의 승리!")
                player_lose += 1
                computer_win += 1
            elif computer_choice_str == "가위":
                print(f"{i}번째 판 나의 승리!")
                player_win += 1
                computer_lose += 1
        elif user_choice == "보":
            if computer_choice_str == '가위':
                print(f"{i}번째 판 컴퓨터의 승리!")
                player_lose += 1
                computer_win += 1
            elif computer_choice_str == "바위":
                print(f"{i}번째 판 나의 승리!")
                player_win += 1
                computer_lose += 1

    return player_win, player_lose, computer_win, computer_lose, draw

games = int(input("몇 판을 진행하시겠습니까?: "))
player_win, player_lose, computer_win, computer_lose, draw = play_time(games)

print(f"나의 전적: {player_win}승 {draw}무 {player_lose}패")
print(f"컴퓨터의 전적: {computer_win}승 {draw}무 {computer_lose}패")

import random

def get_input(): #입력 받는 함수
    inputs_list = ["0", "1", "2", "가위", "바위", "보"]
    while (1):
        my = input("가위 바위 보 :")
        # inputs_list 안에 입력값이 있는지 검사
        if my in inputs_list : break
        else: print("다시 입력해세요.")

    return my

def rcp(): #가위바위보 진행 함수
    com_num = random.randint(0,2)
    my_input = get_input()
    # my 선택값
    if (my_input == '0'): my = "가위"
    elif (my_input == '1'): my = "바위"
    elif (my_input == '2'): my = "보"
    else :
        my = my_input
        if (my_input == "가위"): my_input = 0
        elif (my_input == "바위"): my_input = 1
        elif (my_input == "보"): my_input = 2
    my_input = int(my_input)
    # 나 출력
    print(f"나: {my}")
    # computer 선택값 설정
    if (com_num == 0): com = "가위"
    elif (com_num == 1): com = "바위"
    else: com = "보"
    # 컴퓨터 출력
    print(f"컴퓨터: {com}")
    # 결과 반환
    if (my_input == com_num): return 0
    elif ((my_input - com_num) == 1) | ((my_input - com_num) == -2): return 1
    else : return 2

def rcp_advanced(games): #최종 함수
    # 변수 설정
    count = 0
    win = 0
    tie = 0
    lose = 0
    # 게임 진행
    for i in range(games):
        count += 1
        result = rcp()
        # 반환 값에 따른 결과 정리
        if (result == 0) :
            tie += 1
            output = "무승부"
        elif (result == 1) :
            win += 1
            output = "나의 승리"
        else :
            lose += 1
            output = "컴퓨터의 승리"
        print(f"{count} 번째 판 {output}")

    print(f"나의 전적: {win}승 {tie}무 {lose}패")
    print(f"컴퓨터의 전적: {lose}승 {tie}무 {win}패")

games = int(input("몇 판을 진행하시겠습니까? : "))
rcp_advanced(games)

"""📌Q3. 2개의 숫자를 입력하여 그 사이에 짝수만 출력하는 함수를 만들어 봅시다.
           그리고 중앙값도 함께 출력 해봅시다.
           (단, 중앙값이 짝수가 아닐 경우에는 중앙값은 출력을 하지 않고 짝수인 수만 출력한다)
           [난이도 : ⭐️⭐️/5]
"""

def find_even_number(n,m):
    print("첫 번째 수 입력:",n)
    print("두 번째 수 입력:",m)
    numbers = [i for i in range(n,m+1)]

    even_numbers =[]
    median = (n+m) // 2

    for num in range(n, m+1):
        if num %2 ==0:
            even_numbers.append(num)
            num += 1

    for num in even_numbers:
        print(num,"짝수")
        if num == median:
            print(num,"중앙값")

n = (int(input("첫 번째 수 입력: ")))
m = (int(input("두 번째 수 입력: ")))
find_even_number(n,m)

def find_even_number(n,m):
    numbers = [i for i in range(n, m+1)]
    mid = numbers[int((m-n)/2)]
    evenmid = 1
    if mid%2 == 0:
        evenmid = mid

    for i in numbers:
        if i%2==0:
            print(i, "짝수")
            if i==evenmid:
                print(mid, "중앙값")



n = int(input("첫 번째 수 입력 : "))
m = int(input("두 번째 수 입력 : "))
find_even_number(n, m)

"""📌Q4. 2개의 숫자 사이에 소수가 몇 개인지 출력하는 함수를 만들어 봅시다. [난이도 : ⭐️⭐️⭐️/5]"""

def prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def count_prime_number(n, m):
    count = 0
    for num in range(n, m + 1):
        if prime(num):
            count += 1
    return count

n = int(input("첫 번째 수 입력: "))
m = int(input("두 번째 수 입력: "))

print(f"{n}와 {m} 사이에 소수의 개수: {count_prime_number(n, m)}")

def count_prime_numbers(n, m):
    count = 0
    for i in range(n,m+1):
        prime = 0
        if (i==1): continue # 1은 소수가 아니지만 아래 구문의 조건에는 부합하므로, 1은 continue를 사용해서 count가 증가하지 않도록 함
        for j in range(2, int(i**(1/2))+1): #2부터 i의 제곱근 이하까지의 수까지 검사
            if (i % j == 0) : prime = 1
        if (prime == 0) : count += 1
    print(f"소수 개수 : {count}")

n = int(input("첫 번째 수 입력 : "))
m = int(input("두 번째 수 입력 : "))
count_prime_numbers(n, m)